from fastapi import FastAPI  # Import de FastAPI pour crÃ©er l'application web
from pydantic import BaseModel  # Pour dÃ©finir des modÃ¨les de donnÃ©es robustes
from enum import Enum  # Pour crÃ©er un type Ã©numÃ©rÃ© (valeurs fixes)
import json  # Pour lire et Ã©crire des fichiers JSON
import os  # Pour interagir avec le systÃ¨me de fichiers

# DÃ©finition d'une Ã©numÃ©ration pour le niveau du personnage
class Niveau(str, Enum):
    FAIBLE = "Faible"
    MOYEN = "Moyen"
    FORT = "Fort"

# ModÃ¨le de donnÃ©es reÃ§u en entrÃ©e (depuis le client)
class PersonnageInput(BaseModel):
    nom: str
    score: int

# ModÃ¨le de donnÃ©es renvoyÃ© en sortie (inclut le niveau calculÃ©)
class PersonnageOutput(PersonnageInput):
    niveau: Niveau

# Fonction pour dÃ©terminer le niveau en fonction du score
def calculer_niveau(score: int) -> Niveau:
    if score < 50:
        return Niveau.FAIBLE
    elif score < 80:
        return Niveau.MOYEN
    else:
        return Niveau.FORT

# Fonction pour archiver les personnages dans un fichier JSON
def archiver_personnage(personnage: PersonnageOutput, fichier="webhook_log.json"):
    data = []
    if os.path.exists(fichier):  # Si le fichier existe dÃ©jÃ 
        try:
            with open(fichier, "r", encoding="utf-8") as f:
                data = json.load(f)  # On lit le contenu existant
        except json.JSONDecodeError:
            pass  # Si le JSON est corrompu, on ignore
    data.append(personnage.dict())  # On ajoute le nouveau personnage
    with open(fichier, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)  # On sauvegarde

# Fonction pour enregistrer une notification dans un fichier texte
def enregistrer_notification(message: str, fichier="notifications.txt"):
    with open(fichier, "a", encoding="utf-8") as f:
        f.write(message + "\n")  # On ajoute la ligne de message

# CrÃ©ation de l'application FastAPI
app = FastAPI()

# Dictionnaire pour activer/dÃ©sactiver les notifications
notifications_activÃ©es = {"active": True}

# Endpoint principal : reÃ§oit un personnage, calcule son niveau et lâ€™archive
@app.post("/webhook/personnage", response_model=PersonnageOutput)
def recevoir_personnage(p: PersonnageInput):
    niveau = calculer_niveau(p.score)
    personnage = PersonnageOutput(**p.dict(), niveau=niveau)  # Fusion des donnÃ©es
    archiver_personnage(personnage)  # Sauvegarde dans webhook_log.json
    print("âœ… Personnage ajoutÃ© avec succÃ¨s !")

    if notifications_activÃ©es["active"]:
        notifier(personnage)  # Appel de la fonction de notification

    return personnage  # On retourne les donnÃ©es enrichies

# Endpoint appelÃ© pour envoyer une notification (peut aussi Ãªtre appelÃ©e seule)
@app.post("/notifier")
def notifier(personnage: PersonnageOutput):
    message = f"ðŸ“£ Nouveau personnage : {personnage.nom} - Niveau {personnage.niveau}"
    print(message)
    enregistrer_notification(message)
    return {"message": "Notification envoyÃ©e"}

# Endpoint pour activer ou dÃ©sactiver les notifications
@app.post("/subscribe")
def subscribe(active: bool):
    notifications_activÃ©es["active"] = active
    return {"message": f"Notifications {'activÃ©es' if active else 'dÃ©sactivÃ©es'}"}


#Pour tester : uvicorn main_webhook_api:app --reload